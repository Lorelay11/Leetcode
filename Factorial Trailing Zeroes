Given an integer n, return the number of trailing zeroes in n!.

Follow up: Could you write a solution that works in logarithmic time complexity?

 

Example 1:

Input: n = 3
Output: 0
Explanation: 3! = 6, no trailing zero.
Example 2:

Input: n = 5
Output: 1
Explanation: 5! = 120, one trailing zero.
Example 3:

Input: n = 0
Output: 0

class Solution {
    public int trailingZeroes(int n) {
            //to find the number of trailing zeroes we use formula in which we divide the number by 5 then 5 power 2
            //due to our number has limit power 4 so the bigest divider would be 3125
            int result = 0;
            result = n/5+n/25+n/125+n/625+n/3125;

        return result;
        }
}
